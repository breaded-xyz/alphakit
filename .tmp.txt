Benchmark-8   	       1	3427434834 ns/op	1602052856 B/op	 2920981 allocs/op

Benchmark-8   	       2	 625058584 ns/op	1557497180 B/op	 2819550 allocs/op

Benchmark-8   	       2	 560878750 ns/op	1557492784 B/op	 2819527 allocs/op

var dec decimal.Decimal

	switch (any)(v).(type) {
	case int:
		return decimal.NewFromInt(int64(v))
	case int64:
		return decimal.NewFromInt(int64(v))
	case float64:
		return decimal.NewFromFloat(float64(v))
	}


func closeTime(start1, start2 time.Time) time.Time {
	if start1.IsZero() {
		return start2
	}
	interval := start2.Sub(start1)
	return start2.Add(interval)
}

func TestCloseTime(t *testing.T) {
	interval := time.Hour * 4
	start1 := time.Now()
	start2 := start1.Add(interval)

	t.Run("valid start times", func(t *testing.T) {
		exp := start2.Add(interval)
		act := closeTime(start1, start2)
		assert.EqualValues(t, exp, act)
	})

	t.Run("start 1 is zero", func(t *testing.T) {
		act := closeTime(time.Time{}, start2)
		assert.EqualValues(t, start2, act)
	})
}

type Percent float64

type AssetPricesMap map[market.Asset][]market.Kline

type StudyCase map[string]any

type StepResult struct {
	Report perf.PerformanceReport
}

type MakeBotFunc func() trader.ConfigurableBot
type MakeDealerFunc func() broker.SimulatedDealer

type Runner struct {
	cases []StudyCase
}

func NewRunner() *Runner {
	return nil
}

func (o *Runner) Prepare(cases []StudyCase, samples AssetPricesMap, split Percent, warmup int) (int, error) {
	return 0, nil
}

func (o *Runner) Start(ctx context.Context) (chan<- StepResult, error) {

	return nil, nil
}

/*wp := workerpool.New(16)
var mu sync.Mutex
for i := range testCases {
	i := i
	wp.Submit(func() {
		tCase := testCases[i]
		dealer := backtest.NewDealer()
		if err := dealer.Configure(tCase); err != nil {
			if errors.Is(err, trader.ErrInvalidConfig) {
				return
			}
			panic(err)
		}

		bot := _typeRegistry[config["bot"].(string)].(botMakerFunc)()
		bot.SetDealer(dealer)
		if err := bot.Configure(tCase); err != nil {
			if errors.Is(err, trader.ErrInvalidConfig) {
				return
			}
			panic(err)
		}

		result, err := execBacktest(bot, dealer, prices)
		if err != nil {
			panic(err)
		}
		result.Description = fmt.Sprintf("%+v", tCase)

		mu.Lock()
		results = append(results, result)
		mu.Unlock()

		bar.Add(1)
	})
}

wp.StopWait()*/
