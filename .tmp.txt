Benchmark-8   	       1	3427434834 ns/op	1602052856 B/op	 2920981 allocs/op

var dec decimal.Decimal

	switch (any)(v).(type) {
	case int:
		return decimal.NewFromInt(int64(v))
	case int64:
		return decimal.NewFromInt(int64(v))
	case float64:
		return decimal.NewFromFloat(float64(v))
	}


func closeTime(start1, start2 time.Time) time.Time {
	if start1.IsZero() {
		return start2
	}
	interval := start2.Sub(start1)
	return start2.Add(interval)
}

func TestCloseTime(t *testing.T) {
	interval := time.Hour * 4
	start1 := time.Now()
	start2 := start1.Add(interval)

	t.Run("valid start times", func(t *testing.T) {
		exp := start2.Add(interval)
		act := closeTime(start1, start2)
		assert.EqualValues(t, exp, act)
	})

	t.Run("start 1 is zero", func(t *testing.T) {
		act := closeTime(time.Time{}, start2)
		assert.EqualValues(t, start2, act)
	})
}